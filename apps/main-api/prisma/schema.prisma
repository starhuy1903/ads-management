generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model panel {
  id                    Int           @id @default(autoincrement())
  typeId                Int           @map(name: "type_id")
  width                 Decimal
  height                Decimal
  locationId            Int           @map(name: "location_id")
  imageUrls             String[]      @map(name: "image_urls")
  createContractDate    DateTime      @map(name: "create_contract_date")
  expiredContractDate   DateTime      @map(name: "expired_contract_date")
  companyEmail          String        @map(name: "company_email")
  companyNumber         String        @map(name: "company_number")
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime       @updatedAt @map(name: "updated_at")
  status                PanelStatus   @default(DRAFT)
  belongPanelId         Int?          @map(name: "belong_panel_id")
  adsRequest            ads_request[] 
  panel                 panel?        @relation("panelTopanel", fields: [belongPanelId], references: [id], onDelete: Cascade)
  otherPanel            panel[]       @relation("panelTopanel")
  location              location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  type                  panel_type    @relation(fields: [typeId], references: [id], onDelete: Cascade)
  report                report[]
}

model panel_type {
  id    Int     @id @default(autoincrement())
  name  String
  panel panel[]
}

model location {
  id                 Int                @id @default(autoincrement())
  lat                Decimal
  long               Decimal
  isPlanning         Boolean            @default(false) @map(name: "is_planning")
  districtId         Int                @map(name: "district_id")
  wardId             Int                @map(name: "ward_id")
  fullAddress        String             @map(name: "full_address")
  typeId             Int                @map(name: "type_id")
  adTypeId           Int                @map(name: "ad_type_id")
  imageUrls          String[]           @map(name: "image_urls")
  createdAt          DateTime           @default(now()) @map(name: "created_at")
  updatedAt          DateTime           @updatedAt @map(name: "updated_at")
  name               String?            @map(name: "name")
  belongLocationId   Int?               @map(name: "belong_location_id")
  status             LocationStatus     @default(APPROVED)
  adsRequest         ads_request[]     
  adType             advertisement_type @relation(fields: [adTypeId], references: [id], onDelete: Cascade)
  location           location?          @relation("locationTolocation", fields: [belongLocationId], references: [id], onDelete: Cascade)
  otherLocation      location[]         @relation("locationTolocation")
  district           district           @relation(fields: [districtId], references: [id], onDelete: Cascade)
  type               location_type      @relation(fields: [typeId], references: [id], onDelete: Cascade)
  ward               ward               @relation(fields: [wardId], references: [id], onDelete: Cascade)
  panel              panel[]
  report             report[]
}

model location_type {
  id       Int        @id @default(autoincrement())
  name     String
  location location[]
}

model advertisement_type {
  id       Int        @id @default(autoincrement())
  name     String
  location location[]
}

model district {
  id       Int        @id @default(autoincrement())
  name     String
  location location[]
  ward     ward[]
  user     user[]
}

model ward {
  id          Int        @id @default(autoincrement())
  name        String
  districtId  Int        @map(name: "district_id")
  location    location[]
  user        user[]
  district    district   @relation(fields: [districtId], references: [id], onDelete: Cascade)
}

model ads_request {
  id          Int            @id @default(autoincrement())
  reason      String
  status      String         @map(name: "status")
  targetType  String         @map(name: "target_type")
  userId      Int            @map(name: "user_id")
  locationId  Int?           @map(name: "location_id")
  panelId     Int?           @map(name: "panel_id")
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime       @updatedAt @map(name: "updated_at")
  type        AdsRequestType @default(UPDATE_DATA)
  location    location?      @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ads_request_location")
  panel       panel?         @relation(fields: [panelId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ads_request_panel")
  user        user           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ads_request_user")
}

model report {
  id               Int         @id @default(autoincrement())
  typeId           Int         @map(name: "type_id")
  fullName         String      @map(name: "full_name")
  email            String      @map(name: "email")
  content          String
  imageUrls         String[]    @map(name: "image_urls")
  targetType       String      @map(name: "target_type")
  locationId       Int?        @map(name: "location_id")
  panelId          Int?        @map(name: "panel_id")
  status           String      @map(name: "status")
  resolvedContent  String      @map(name: "resolved_content")
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime       @updatedAt @map(name: "updated_at")
  userUuid         String      @map(name: "user_uuid")
  location         location?   @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_report_location")
  panel            panel?      @relation(fields: [panelId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_report_panel")
  reportType       report_type @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_report_reporttype")
}

model report_type {
  id     Int      @id @default(autoincrement())
  name   String?  @map(name: "name")
  report report[]
}

model user {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  password       String
  firstName      String        @map(name: "first_name")
  lastName       String        @map(name: "last_name")
  phoneNumber    String?       @map(name: "phone_number")
  dob            DateTime?     @map(name: "dob")
  resetPassword  Boolean       @default(false) @map(name: "reset_password")
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map(name: "updated_at")
  role           UserRole      @default(WARD_OFFICER)
  wardId         Int?          @map(name: "ward_id")
  districtId     Int?          @map(name: "district_id")
  ward           ward?         @relation(fields: [wardId], references: [id], onDelete: Cascade)
  district       district?     @relation(fields: [districtId], references: [id], onDelete: Cascade)
  adsRequest     ads_request[]
  tokens         token[]
}

model token {
  id          String   @id @default(uuid())
  userId      Int      @map(name: "user_id")
  token       String
  expiresAt   DateTime @map(name: "expires_at")
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map(name: "updated_at")
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PanelStatus {
  DRAFT
  APPROVED
  AWAITING_UPDATE
}

enum AdsRequestType {
  UPDATE_DATA
  APPROVED_PANEL
}

enum UserRole {
  WARD_OFFICER
  DISTRICT_OFFICER
  DEPARTMENT_OFFICER
}

enum LocationStatus {
  APPROVED
  AWAITING_UPDATE
}
